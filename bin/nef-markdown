#!/bin/bash

LOG_PATH="/nef/markdown"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
lime=$(tput setaf 190)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    echo ""
    echo "${normal}$0 ${bold}--project ${normal}<project> ${bold}--output ${normal}<output> ${reset}"
    echo ""
    echo "    ${lime}${bold}--project${reset}${normal} path where playground's pages are.${reset}"
    echo "    ${lime}${bold}--output${reset}${normal} path where to render the Markdown.${reset}"
    echo "${reset}"
}

#: - Render

##
#   generateDocumentation(String projectPath, String outputPath)
#   - Parameter `project`: path to the project folder.
#   - Parameter `outputPath`: path where to render the Markdown.
##
generateMarkdown() {
    local projectPath="$1" # parameter 'projectPath'
    local outputPath="$2"  # parameter 'outputPath'

    makeStructure "$projectPath" "$outputPath"
    buildMarkdown "$projectPath" "$outputPath"
}

##
#   buildMarkdown(String projectPath, String outputPath)
#   - Parameter `projectPath`: path to the project folder.
#   - Parameter `outputPath`: path where to render the Markdown.
##
buildMarkdown() {
    local projectPath="$1" # parameter 'projectPath'
    local outputPath="$2"  # parameter 'outputPath'

    playgrounds "$projectPath"

    for playground in "${playgrounds[@]}"; do
        playgroundName=`echo "$playground" | rev | cut -d'/' -f -1 | cut -d'.' -f 2- | rev`
        playgroundPath="$projectPath/$playground"
        output="$outputPath/$playgroundName"

        echo -ne "${normal}Rendering Markdown files for ${green}$playgroundName${reset}..."

        cleanStructure "$output"
        mkdir -p "$output"
        pagesInPlayground "$playgroundPath"

        for pagePath in "${pagesInPlayground[@]}"; do
            pageName=`echo "$pagePath" | rev | cut -d'/' -f -1 | cut -d'.' -f 2- | rev`
            log="$projectPath/$LOG_PATH/$playgroundName-$pageName.log"

            nef-markdown-page --from "$pagePath" --to "$output" --filename "$pageName" 1> "$log" 2>&1

            installed=`grep "RENDER SUCCEEDED" "$log"`
            if [ "${#installed}" -lt 7 ]; then
              echo " ❌"
              echo "${bold}${red}error: ${reset}render page ${bold}$pageName${normal} in playground ${bold}$playgroundName${normal}, review '$log' for more information."
              exit 1

            fi
        done

        echo " ✅"
    done
}

##
#   makeStructure(String project, String outputPath)
#   - Parameter `project`: path to the project folder.
#   - Parameter `outputPath`: path where render the markdown.
##
makeStructure() {
    set +e
    local logPath="$1/$LOG_PATH"  # parameter `project`
    local outputPath="$2"         # parameter `outputPath`

    cleanStructure "$outputPath/*/*.md"
    mkdir -p "$logPath"
    mkdir -p "$outputPath"
}

#: - MAIN
set -e

# Load common nef library
commonNefLibName="nef-common"
commonNefLibPath=$(which "$commonNefLibName")
source "$commonNefLibPath"

# Menu
root=`pwd`
projectPath=""
outputPath=""

while [ "$1" != "" ]; do
    case $1 in
        --project | project )  shift; projectPath=$1 ;;
        --output  | output )   shift; outputPath=$1 ;;
        --help )               printHelp $@; exit 1 ;;
        * )                    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1
    esac
    shift
done

if [ "$projectPath" == "" ]; then
    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} 'project' argument is required";
    exit 1
fi

if [ "$outputPath" == "" ]; then
    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} 'output' argument is required";
    exit 1
fi

# Fixes paths
# 1. fix `projectPath`
if [ -d "$root/$projectPath" ]; then
  projectPath="$root/$projectPath"
fi

# 1. fix `outputPath`
if [ -d "$root/$outputPath" ]; then
  outputPath="$root/$outputPath"
else
  mkdir -p "$outputPath"
  outputPath="`pwd`/$outputPath"
fi

# Render Markdown
generateMarkdown "$projectPath" "$outputPath"
