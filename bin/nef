#!/bin/bash

#: Valid Args
MARKDOWN="markdown"
JEKYLL="jekyll"
PLAYGROUND="playground"
COMPILE="compile"
CLEAN="clean"

#: Default params
DEFAULT_PLAYGROUND="BowPlayground"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 196)
green=$(tput setaf 35)
required=$(tput setaf 222)
optional=$(tput setaf 230)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    echo ""
    echo "${required}${bold}nef${normal}${reset}"
    echo ""
    echo "${bold}Commands${reset}"
    echo "   ${green}${bold}$COMPILE${normal}${reset}     Compile Swift Playgrounds given a <path>"
    echo "   ${green}${bold}$CLEAN${normal}${reset}       Clean a generated nef project from a <path>"
    echo "   ${green}${bold}$PLAYGROUND${normal}${reset}  Build a playground compatible with external frameworks"
    echo "   ${green}${bold}$JEKYLL${normal}${reset}      Render Markdown files that can be consumed from Jekyll to generate a microsite"
    echo "   ${green}${bold}$MARKDOWN${normal}${reset}    Render Markdown files for given Swift Playgrounds"
    echo ""
}

##
#   printHelpMarkdown()
##
printHelpMarkdown() {
    echo ""
    echo "${normal}nef ${green}${bold}$MARKDOWN${normal} ${required}${bold}--project${normal}${reset} <path-to-input> ${required}${bold}--output${normal}${reset} <path-to-output>"
    echo ""
    echo "    Render Markdown files"
    echo ""
    echo "    ${required}${bold}--project${normal}${reset} path to the folder containing the Xcode project with Swift Playgrounds"
    echo "    ${required}${bold}--output${normal}${reset} path where the resulting Markdown files will be generated"
    echo ""
}

##
#   printHelpJekyll()
##
printHelpJekyll() {
    echo ""
    echo "${normal}nef ${green}${bold}$JEKYLL${normal} ${required}${bold}--project${normal}${reset} <path-to-input> ${required}${bold}--output${normal}${reset} <path-to-output> ${optional}${bold}--main-page${normal}${reset} <path-to-index>"
    echo ""
    echo "    Render Markdown files that can be consumed from Jekyll to generate a microsite"
    echo ""
    echo "    ${required}${bold}--project${normal}${reset} path to the folder containing the Xcode project with Swift Playgrounds"
    echo "    ${required}${bold}--output${normal}${reset} path where the resulting Markdown files will be generated"
    echo "    ${optional}${bold}--main-page${normal}${reset} path to a README.md file to be used as the index page of the generated microsite ${optional}[optional]${reset}"
    echo ""
}

##
#   printHelpPlayground()
##
printHelpPlayground() {
    echo ""
    echo "${normal}nef ${green}${bold}$PLAYGROUND${normal} ${optional}${bold}--name${normal}${reset} <project> ${optional}${bold}--bow-version${normal}${reset} <version format: x.y.z> ${optional}${bold}--bow-branch${normal}${reset} <branch-name> ${optional}${bold}--podfile${normal}${reset} <path>"
    echo ""
    echo "    Build a playground compatible with external frameworks"
    echo ""
    echo "    ${optional}${bold}--name${reset}${normal} specify the name for the Xcode project that you are creating ${optional}[default: $DEFAULT_PLAYGROUND]${reset}"
    echo ""
    echo "    ${optional}${bold}--bow-version${reset}${normal} specify the version of Bow that you want to use in the project ${optional}[optional]${reset}"
    echo "    ${optional}${bold}--bow-branch${reset}${normal} specify the branch of Bow that you want to use in the project ${optional}[optional]${reset}"
    echo "    ${optional}${bold}--podfile${reset}${normal} specify a Podfile with your own dependencies ${optional}[optional]${reset}"
    echo ""
}

##
#   printHelpCompileClean()
##
printHelpCompile() {
    printHelpCompileClean
}

printHelpClean() {
    printHelpCompileClean
}

printHelpCompileClean() {
    echo ""
    echo "${normal}nef ${green}${bold}$COMPILE${normal}${reset} | ${green}${bold}$CLEAN${normal}${reset} <path> <options>"
    echo ""
    echo "    ${required}${bold}<path>${reset}${normal} path to the folder where the project and playgrounds are located"
    echo "    ${optional}${bold}--use-cache${reset}${normal} is an option for 'compile' command. Use cached dependencies if it is possible. In another case, it will download them ${optional}[optional]${reset}"
    echo ""
}

#: - Dependencies

##
# checkDependencies() throws
##
checkDependencies() {
  checkCocoaPods
}

##
#   checkCocoaPods() throws
##
checkCocoaPods() {
  totalCommandsPod=$(command -v pod | wc -l)
  if [ $totalCommandsPod -eq 0 ]; then
    echo "[!] ${bold}${red}error: ${reset}required cocoapods. Please ${bold}install cocoapods${reset}. Run: 'sudo gem install cocoapods'"
    exit 1
  fi

  requiredVersion='1.6.1'
  podVersion=`pod --version`
  minorPodVersionRequired=(`printf "$podVersion\n$requiredVersion\n" | sort`)

  if [ "$minorPodVersionRequired" != "$requiredVersion" ]; then
    echo "[!] ${bold}${red}error: ${reset}required cocoapods version ${bold}'$requiredVersion'${normal} [found: ${red}'$podVersion'${reset}]"
    echo ""
    echo "Please ${bold}update your cocoapods${reset}. Run: 'sudo gem install cocoapods'"
    echo ""
    exit 1
  fi
}

#: - Jekyll

##
#   markdown(List<String> args)
#   - Parameter `args`: list of command line arguments
##
markdown() {
  projectPath=""
  outputPath=""

  while [ "$1" != "" ]; do
      case $2 in
          -h | --help | help )  printHelpMarkdown; exit 0 ;;
      esac

      case $1 in
          --project )      shift; projectPath=$1 ;;
          --output )       shift; outputPath=$1 ;;
          --main-page )    printHelpJekyll; exit 1 ;;

          --name )         printHelpPlayground; exit 1 ;;
          --bow-version )  printHelpPlayground; exit 1 ;;
          --bow-branch )   printHelpPlayground; exit 1 ;;
          --podfile )      printHelpPlayground; exit 1 ;;

          --use-cache)     printHelpCompile; exit 1 ;;

          $MARKDOWN )      ;;
          $JEKYLL )        printHelpJekyll; exit 1;;
          $PLAYGROUND )    printHelpPlayground; exit 1 ;;
          $COMPILE )       printHelpCompile; exit 1 ;;
          $CLEAN )         printHelpClean; exit 1 ;;
          * )              printHelpMarkdown; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1 ;;
      esac
      shift
  done

  if [ "$projectPath" == "" ] || [ "$outputPath" == "" ]; then
      printHelpMarkdown; exit 1
  else
      nef-markdown --project "$projectPath" --output "$outputPath"
  fi
}

##
#   jekyll(List<String> args)
#   - Parameter `args`: list of command line arguments
##
jekyll() {
  projectPath=""
  outputPath=""
  mainPagePath=""

  while [ "$1" != "" ]; do
      case $2 in
          -h | --help | help )  printHelpJekyll; exit 0 ;;
      esac

      case $1 in
          --project )      shift; projectPath=$1 ;;
          --output )       shift; outputPath=$1 ;;
          --main-page )    shift; mainPagePath=$1 ;;

          --name )         printHelpJekyll; exit 1 ;;
          --bow-version )  printHelpPlayground; exit 1 ;;
          --bow-branch )   printHelpPlayground; exit 1 ;;
          --podfile )      printHelpPlayground; exit 1 ;;

          --use-cache)     printHelpCompile; exit 1 ;;

          $MARKDOWN )      printHelpMarkdown; exit 1 ;;
          $JEKYLL )        ;;
          $PLAYGROUND )    printHelpPlayground; exit 1 ;;
          $COMPILE )       printHelpCompile; exit 1 ;;
          $CLEAN )         printHelpClean; exit 1 ;;
          * )              printHelpJekyll; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1 ;;
      esac
      shift
  done

  if [ "$projectPath" == "" ] || [ "$outputPath" == "" ]; then
      printHelpJekyll; exit 1
  else
      nef-jekyll --project "$projectPath" --output "$outputPath" --main-page "$mainPagePath"
  fi
}

##
#   playground(List<String> args)
#   - Parameter `args`: list of command line arguments
##
playground() {
    projectName=$DEFAULT_PLAYGROUND
    version=""
    branch=""
    podfile=""

    while [ "$1" != "" ]; do
        case $2 in
            -h | --help | help )  printHelpPlayground; exit 0 ;;
        esac

        case $1 in
            --project )      printHelpPlayground; exit 1 ;;
            --output )       printHelpPlayground; exit 1 ;;
            --main-page )    printHelpJekyll; exit 1 ;;

            --name )         shift; projectName=$1 ;;
            --bow-version )  shift; version=$1 ;;
            --bow-branch )   shift; branch=$1 ;;
            --podfile )      shift; podfile=$1 ;;

            --use-cache)     printHelpCompile; exit 1 ;;

            $MARKDOWN )      printHelpMarkdown; exit 1 ;;
            $JEKYLL )        printHelpJekyll; exit 1 ;;
            $PLAYGROUND )    ;;
            $COMPILE )       printHelpCompile; exit 1 ;;
            $CLEAN )         printHelpClean; exit 1 ;;
            * )              printHelpPlayground $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1 ;;
        esac
        shift
    done

    if [ "${#version}" -gt 0 ]; then
      nef-playground --name "$projectName" --bow-version "$version"
    else
      nef-playground --name "$projectName" --bow-branch "$branch" --podfile "$podfile"
    fi

    nefc install  "$projectName"
}

#: - Compile

##
#   compile(List<String> args)
#   - Parameter `args`: list of command line arguments
##
compile() {
    projectFolder=""
    flag=""

    while [ "$1" != "" ]; do
        case $2 in
            -h | --help | help )  printHelpCompile; exit 0 ;;
        esac

        case $1 in
            --project )      printHelpJekyll; exit 1 ;;
            --output )       printHelpJekyll; exit 1 ;;
            --main-page )    printHelpJekyll; exit 1 ;;

            --name )         printHelpPlayground; exit 1 ;;
            --bow-version )  printHelpPlayground; exit 1 ;;
            --bow-branch )   printHelpPlayground; exit 1 ;;
            --podfile )      printHelpPlayground; exit 1 ;;

            --use-cache)     flag="--use-cache" ;;

            $MARKDOWN )      printHelpMarkdown; exit 1 ;;
            $JEKYLL )        printHelpJekyll; exit 1 ;;
            $PLAYGROUND )    printHelpPlayground; exit 1 ;;
            $COMPILE )       shift; projectFolder=$1 ;;
            $CLEAN )         printHelpClean; exit 1 ;;
            * )              printHelpCompile; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1 ;;
        esac
        shift
    done

    if [ "${#projectFolder}" -gt 0 ]; then
      nefc compile "$projectFolder" "$flag"
    else
      printHelpCompile; echo "${bold}[!] ${normal}${red}error:${reset} command format"; exit 1
    fi
}

#: - Clean

##
#   clean(List<String> args)
#   - Parameter `args`: list of command line arguments
##
clean() {
    projectFolder=""

    while [ "$1" != "" ]; do
        case $2 in
            -h | --help | help )  printHelpClean; exit 0 ;;
        esac

        case $1 in
            --project )      printHelpJekyll; exit 1 ;;
            --output )       printHelpJekyll; exit 1 ;;
            --main-page )    printHelpJekyll; exit 1 ;;

            --name )         printHelpPlayground; exit 1 ;;
            --bow-version )  printHelpPlayground; exit 1 ;;
            --bow-branch )   printHelpPlayground; exit 1 ;;
            --podfile )      printHelpPlayground; exit 1 ;;

            --use-cache)     ;;

            $MARKDOWN )      printHelpMarkdown; exit 1 ;;
            $JEKYLL )        printHelpJekyll; exit 1 ;;
            $PLAYGROUND )    printHelpPlayground; exit 1 ;;
            $COMPILE )       printHelpCompile; exit 1 ;;
            $CLEAN )         shift; projectFolder=$1 ;;
            * )              printHelpClean; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1 ;;
        esac
        shift
    done

    if [ "${#projectFolder}" -gt 0 ]; then
      nefc clean "$projectFolder"
    else
      printHelpClean; echo "${bold}[!] ${normal}${red}error:${reset} command format"; exit 1
    fi
}

#: - MAIN
set -e

checkDependencies

while [ "$1" != "" ]; do
    case $1 in
        $MARKDOWN )   markdown $@; exit 0 ;;
        $JEKYLL )     jekyll $@; exit 0 ;;
        $PLAYGROUND ) playground $@; exit 0 ;;
        $COMPILE )    compile $@; exit 0 ;;
        $CLEAN )      clean $@; exit 0 ;;
        -h | --help | help )  printHelp; exit 0 ;;
        * )                   printHelp; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1
    esac
    shift
done

printHelp; exit 1
